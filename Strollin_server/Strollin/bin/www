#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Strollin:server');
var http = require('http');
//var https = require('https');
//var fs = require('fs');


// option for HTTPS

// const options = {
//   key: fs.readFileSync('key.pem'),
//   cert: fs.readFileSync('cert.pem')
// };

//Import Models for socket.io
const {
  UserModel
} = require("../models/user");

const {
  ConversationModel
} = require("../models/conversation");

const {
  MessageModel
} = require("../models/message");

const {
  TagModel
} = require("../models/tag");
const { fstat } = require('fs');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort('3004');
app.set('port', port);


/**
 * Create HTTPS server.
 */

var server = http.createServer(app);
 //var server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

// Maison : 192.168.1.237
// Maison box : 192.168.0.10
// Papan : 192.168.0.19
// Tony : 192.168.0.21

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// SOCKET IO //



var sio = require('socket.io').listen(server)

async function sendNewConversation(conversation) {

  if (conversation.participants) {
    for (let i in conversation.participants) {
      const user = await UserModel.findOne({id : conversation.participants[i]});

      if (user.socket_id) {
        sio.to(user.socket_id).emit("newConversation", conversation);
      }
    }
  }
  console.log("Conversation sent to all participants.");
}

async function sendReceiveMessage(message, conversation) {

  if (conversation.participants) {
    for (let i in conversation.participants) {
      const user = await UserModel.findOne({id : conversation.participants[i]});

      if (user.socket_id) {
        sio.to(user.socket_id).emit("receiveMessage", message);
      }
    }
  }
}


sio.on("connection", async (socket) => {

  const userId = socket.id;

  console.log("connection socket user id ", userId);

  // Event "connection"
  socket.on("login", async (msg) => {
    console.log("connection socket event " , msg);
    const user = await UserModel.findOne({access_token: msg.access_token});
    let response = {
      connected: false,
    };

    user.socket_id = userId;
    await user.save();

    console.log("user ", user);
    if (user) {
      response.connected = true;
      // join all room of conversation in his list
      socket.emit("identification", response);
    } else {
      socket.emit("identification", response);
    }
  });

  socket.on("createConversation", async (msg) => {
    console.log("createConversation event " , msg);
    const user = await UserModel.findOne({access_token: msg.access_token});

    console.log("user ", user);
    if (user) {
      let conversation = new ConversationModel ({
        id: new Number(Date.now()),
        participants : [...msg.participants, user.id],
        name : msg.name,
      }); 

      console.log("conversation ", conversation);

      await conversation.save();


      sendNewConversation(conversation);
      // join all room of conversation in his list
      //socket.emit("newConversation", conversation);
    }
  });
  
  // Event "sendMessage"
  socket.on("sendMessage", async (msg) => {
    console.log("sendMessage event " , msg);
    const user = await UserModel.findOne({access_token: msg.access_token}, "-_id id pseudo");
    let response = {
      connected: false,
    };

    //user.socket_id = userId;
    //await user.save();

    console.log("message ", msg);
    if (user) {
      let conversation = await ConversationModel.findOne({id : msg.conversation});
      console.log("conversation ", conversation);

      if (conversation) {
        let message = new MessageModel ({
          id: new Number(Date.now()),
          creation_date: new Date().toLocaleDateString("fr-FR"),
          expeditor_id: user.id,
          expeditor_pseudo: user.pseudo,
          conversation : msg.conversation,
          type : msg.type,
          message: msg.message
        });

        await message.save();

        console.log("messageModel ", message);

        conversation.messages_list = [...conversation.messages_list, message.id]
        await conversation.save();

        sendReceiveMessage(message, conversation);
        //socket.emit("receiveMessage", message);
      }
      // join all room of conversation in his list
    }
  });

})
/*****/
